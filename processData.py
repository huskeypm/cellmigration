"""
For processing data generated by the openmm cell simulator

"""
import numpy as np
import matplotlib.pylab as plt

def ProcessGroup(df,key):
  """
  Searches dataframe for all instances of tag==key; performs statistics 
  key - key name or 'all' 
  """
  if df.empty:
    raise RuntimeError('DataFrame is empty!')
  if key is not 'all':
    sdf = df.loc[(df['tag'] == key)]
  else: 
    sdf = key

  # find unique conf Val
  uniqueVals = np.unique( sdf['condVal'] )
  if len(uniqueVals)<1:
    raise RuntimeError("Did not find any values. Sorry bro")
  

  Ds = np.zeros_like(uniqueVals)
  Dstds = np.zeros_like(uniqueVals)
  JAs = np.zeros_like(uniqueVals)
  JAstds = np.zeros_like(uniqueVals)
  vFs = np.zeros_like(uniqueVals)

  for i,uniqueVal in enumerate( uniqueVals ) :
    ssdf = sdf.loc[sdf['condVal']==uniqueVal ]

    # D
    vals = ssdf['D']
    vi = np.mean(vals)
    vstdi = np.std(vals)
    #print(key,uniqueVal,np.mean(Dvals))
    Ds[i]=vi
    Dstds[i]=vstdi

    # flux
    vals = ssdf['flux*A(reservoir)'] #['flux*A']
    vi = np.mean(vals)
    vstdi = np.std(vals)
    #print(key,uniqueVal,np.mean(Dvals))
    JAs[i]=vi
    JAstds[i]=vstdi

    # flux
    #vals = ssdf['Vol Frac']
    vals = ssdf['Area Frac']
    vi = np.mean(vals)
    vstdi = np.std(vals)
    #print(key,uniqueVal,np.mean(Dvals))
    vFs[i]=vi

  print(key, uniqueVals)
  return uniqueVals,Ds,Dstds, JAs, JAstds,vFs



def PlotKey(conds,Ds,Dstds,key,color='k',normalize=False,altName=None,mode="D"):
  """
  For plotting data from dataframe 
  """

  if normalize:
    print("Assuming middle value is reference")
    midIdx = int(len(conds-1e-3)/2)
    print("x(%d) = %f"%(midIdx,conds[midIdx]))
    xvals = conds/conds[midIdx]

    #yvals = Ds/Ds[midIdx]
    yvals = Ds  #
    normed = "(normed)"
  else:
    xvals = conds
    yvals = Ds
    normed=""

  plt.plot(xvals,yvals,color+'-')

  err = Dstds # watning, need to do error ppropagation for normalized
  plt.fill_between(
    xvals,
    yvals -err,
    yvals +err,
      alpha=0.2,
      facecolor= color
  )
  plt.scatter(xvals,yvals,facecolor=color)
  if altName is None:
    plt.xlabel(key+normed)
  else:
    plt.xlabel(altName)
  plt.ylabel(mode+normed+"not")
  plt.gcf().savefig(key+".png")

